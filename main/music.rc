#split# music.rc/cdrndm 4367014c95126ec93f2967a50b97b5bf
#help: cdrndm : randomize a preburn cd track list
#help: usage : cdrndm preburn
function cdrndm () {
    rm random &>/dev/null
    while read; do
        echo ${RANDOM}:${REPLY}
    done < "$1" | tee | sort -k1,1n -t: | cut -f2- -d: > random
}
#split# music.rc/dedupe 2c68bc913ba2d37ee18b1f08be7285dd
#help: mp3dedupe : takes a list of mp3 files and creates a uniq list of titles
#help: usage : mp3dedupe file
#help: :
function mp3dedupe () {
    declare path size time keep str max count input=$1 trackdb=${1/m3u/csv}
    declare -a list
    [[ -s $trackdb ]] || mkdb $input
    rm singles dupes preburn &>/dev/null
    # n.b. trackdb uses | for fields but awk is using / as the delimiter so
    # the last field for awk is the track name
    awk -F/ '{print $NF}' $trackdb | cut -c6- | sed 's/.mp3$//' |
    sed -r 's/\(.*\)//g;s/\(.*//;s/ +$//' | sort | uniq -c | sort -k1,1n |
    while read n pattern; do
        (( $n == 1 )) && echo "$pattern" >> singles || echo "$pattern" >> dupes
    done
    echo grepping singles to preburn
    grep -F -f singles $trackdb > preburn
    echo cleaning dupes
    str=$(wc -l dupes)
    max=${str%% *}
    count=0
    exec 5< <(cat dupes)
    while read -u 5 str; do
        clear
        printf "%3d items to dedupe\n" $((max-count++))
        list=()
        while read; do
            list+=("$REPLY")
        done < <(grep "$str" $trackdb)
        select str in "${list[@]}"; do break; done
        echo "$str" >> preburn
    done
    exec 5<&-
}
#split# music.rc/mkdb c3ec83e08f64aaae98eb0b193ac3de0d
#help: mkdb : builds the csv db from m3u list
#help: usage : mkdb m3ufile
function mkdb () {
    declare input=$1 trackdb=${1/m3u/csv} count=$(grep -v '^#' "$1" | wc -l)
    echo patience! exiftool takes time...
    sed -n '/^#/!p' $input |
        while read path; do
            size=$(stat -c %s "$path")
            printf "\r%4d" $((count--)) >&2
            time=$(exiftool -Duration "$path" | grep -o -E '[0-9][0-9:]+')
            echo "$size|$time|$path"
        done > $trackdb 
    echo ''
}
#split# music.rc/mlinker 9e289ff726054928c89f87bb2cdd815f
#help: mlinker : mlinker creates the links for music dirs
#help: usage : mlinker (mp3|flac) localParent file
#help: : file needs to be the base paths you want mounted. the mount point is
#help: : given on the command line
function mlinker () {
    declare orig remote=${1/#\/} local=${2/%\/}
    while read; do
        echo $REPLY
        need=$(echo $REPLY | cut -f2 -d/)
        [[ -d $local/$need ]] || mkdir "$local/$need"
        ln -s "/$remote/$REPLY" "$local/${REPLY#*/}"
    done < <(cat $3)
}
#split# music.rc/mp3x ddcc6532aabd1bd71afe98ce2cf128f2
#help: mp3x : extract just the mp3 lines
#help: usage : mp3x file
#help: : n.b. writes to stdout
function mp3x () {
    cat "${1:--}" | sed '/^#/d'
}
#split# music.rc/repath 5894271c532d1005466a54be932f5136
#help: repath : repath rewrites the path in m3u files to be absolute
#help: usage : repath file
#help: : the output file has -real added to basename
#help: : n.b. the input file should be a regular unix file. you may need to
#help: : use dos2unix to convert the m3u file first
function repath () {
    declare dir title input=$1 output=${1/.m3u}-real.m3u
    while read; do
        [[ $REPLY =~ ^# ]] && echo "$REPLY" && continue
        dir=$(realpath "${REPLY%/*}")
        title=${REPLY##*/}
        echo "$dir/$title"
    done < $input > $output
}
#split# music.rc/splitter 55bc28b4aeddf693d6eea5c1b1829948
#help: splitter : splits a csv file into pieces to burn to cd
#help: usage : splitter file
function splitter () {
    declare sum max size time path
    sum=0
    max=$((700*10**6))
    exec 5< <(sed 's/|/ /g' "$1")
    while read -u 5 size time path; do
        ((sum+=$size))
        (( $sum < $max )) || { echo ''; sum=$size; }
        echo "$path"
    done | csplit - /^$/ {*}
    exec 5<&-
    sed -i '/^$/d' xx*
}
#split# music.rc/trknamer 67c0b87fc681e693cf3558b70274c85d
#help: trknamer : used to name the tracks in a simple fashion
#help: usage : trknamer start
function trknamer () {
    declare type track tcount dir dcount
    declare dbfile=pairs.csv
    if [[ -f $dbfile ]]; then
        dcount=$(sed -n '2,$p' $dbfile | cut -f1 -d\; | sort -r | sed -n '1p')
        dcount=$((1+10#${dcount/d}))
    else
        dcount=1
    fi
    for x in xx*; do
        printf -v dir "d%04d" $((dcount++))
        [[ -d $dir ]] || mkdir $dir
        tcount=1
        while read; do
            [[ -n $REPLY ]] || continue
            type=${REPLY##*.}
            printf -v track "%s%03d" ${type:0:1} $((tcount++))
            cp -H "$REPLY" $dir/$dir$track.$type && echo "$dir;$track;$REPLY"
        done < <(cut -f2 -d: $x) >> pairs
        awk -v n=$x -F: '{sum+=$1}END{print n":"NR":"sum}' $x
    done
}
