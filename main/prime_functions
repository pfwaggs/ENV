#help: L : provides ls support for hidden (dot) files
#help: usage : L [options] [dir]
function L ()
{
    declare -a args
    declare opts=lAd
    for x in $*; do
        case $x in
            -?)
                opts+=${x/-}
                ;;
            *)
                args+=("$x")
                ;;
        esac
    done
    [[ ${#args[@]} -gt 0 ]] || args+=(.)
    for x in "${args[@]}"; do
        ls -$opts "$x"/.??* 2> /dev/null
    done
}

#help: _ArgParser : argument completion function
function _ArgParser () {
    declare path file partial dir
    declare -a list
    [[ -n COMP_LINE ]] && x=$2 || x=$1
    partial=${x/\~/$HOME}
    file=${partial##*/}
    for dir in "${partial%/*}" "${DIRSTACK[@]}" ${CDPATH//:/ }; do
	[[ ${#list[@]} -eq 0 ]] || break
	while read -r path; do
	    [[ -d $path ]] && list+=("$path")
	done < <(compgen -G "${dir:-.}/$file*" | sort)
    done
    [[ ${#list[@]} -gt 0 ]] && _FixList -u "${list[@]}"
}

#help: _FixList :  some basic list operations:
#help: :  -s sort
#help: :  -e exists
#help: :  -r reverse
#help: :  -l resolve links
#help: :  -c clear items
#help: :  -u unique items
#help: :  -S output a single string
function _FixList ()
{
    declare p opt
    declare -a nlist list opts
    for p in "$@"; do
        [[ $p =~ ^-.* ]] && opts+=($p) || list+=("$p")
    done
    if [[ ${#list[@]} -eq 0 ]]; then
        while read p; do
            list+=("$p")
        done < <(cat -- -)
    fi
    for opt in ${opts[@]}; do
        nlist=()
        case $opt in
            -s)
		while read -r p; do
                    nlist+=("$p")
                done < <(printf '%s\n' "${list[@]}" | sort)
                ;;
            -e)
                for p in "${list[@]}"; do
                    [[ -e "$p" ]] && nlist+=("$p") || continue
                done
                ;;
            -r)
		while read -r p; do
                    nlist+=("$p")
                done < <(printf '%s\n' "${list[@]}" | tac)
                ;;
            -l)
                for p in "${list[@]}"; do
                    [[ -L "$p" ]] && p=$(readlink -e "$p") || :
                    nlist+=("$p")
                done
                ;;
            -c)
		for p in "${list[@]:1}"; do
		    [[ $p =~ ${list[0]}.* ]] || nlist+=("$p")
                done
                ;;
            -u)
                for p in "${list[@]}"; do
                    [[ ${nlist[@]} =~ :$p ]] || nlist+=(":$p")
                done
                nlist=("${nlist[@]/#:}")
                ;;
            -S|*)
                declare IFS=${SEP:-:}$IFS
                echo "${list[*]}"
		return
                ;;
        esac
        list=("${nlist[@]}")
    done
    printf '%s\n' "${list[@]}"
}

#help: _Show : complete function for the show function
function _Show ()
{
    declare x
    [[ -n $COMP_LINE ]] && x=$2 || x=$1
    compgen -v | grep -i "^$x"
}

#help: configEd : configure the editor of your choice (emacs, vim)
#help: usage : configEd [emacs|vim]
function configEd () {
    case $1 in
	emacs)
	    ps -f -C emacs | grep -q daemon || emacs --daemon
	    export EDITOR=$(type -p emacsclient | head -n 1)
	    export VISUAL=$EDITOR
	    set -o emacs
	    ;;
	vim)
	    export EDITOR=$(type -p vim vi | head -n 1)
	    export VISUAL=$EDITOR
	    set -o vi
	    ;;
    esac
}

#help: extra : shortcut to set extra for the prompt
#help: usage : extra [color=]'text'
function extra () { stp extra="$*"; }

#help: hlp : help for functions loaded
#help: usage : hlp function
#help: usage : hlp
function hlp () {
    declare flist=$(echo $MAINDIR/*_functions)
    if [[ $# -eq 1 ]]; then
	sed -nr "/^#help: $1 :/{:1;p;n;/^function/!b1}" $flist | cut -f2- -d: | column -n -s: -t
    else
	awk '/^function / {print "#help: "$2" :"}' $flist |
	    grep -f - $flist | sed -n "s|$MAINDIR/||p" |
	    cut -f1,3- -d: | column -s: -t | sort -k1,1r -k2,2 
    fi
}

#help: load : loads functions from MAINDIR files
#help: usage : load function
function load () {
    declare list x y 
    for x in $@; do
	list=$(grep -l -w "^function $x " $MAINDIR/*_functions)
	[[ -n $list ]] || { echo skipping $x, not found in $MAINDIR; continue; }
	for y in $list; do
	    echo loading $x from $y
	    sed -nr "/^function $x /{:1;p;n;/^}/!b1;p;q}" $y > /tmp/$x
	    . /tmp/$x
	    rm /tmp/$x
	done
	list=''
    done
}

#help: lsu : a long listing of dirs moving up the dir path
#help: usage : lsu
function lsu ()
{
    declare -a np=(/ "${1:-$PWD}")
    while [[ -n ${np[-1]%/*} ]]; do
        np+=(${np[-1]%/*})
    done
    ls -ld "${np[@]}"
}

#help: mkwdir : creates a new arg.nn dir based on arg
#help: usage : mkwdir (base)
#help: : default arg is the date
function mkwdir ()
{
    declare count dir pat date=$(date +%F | tr '-' '_')
    pat=${1:=$date}
    count=$(ls -d $pat.?? 2>/dev/null | wc -l)
    printf -v dir "%s.%02d" $pat $((1+count))
    mkdir -v $dir
}

#help: pop : simple wrapper for popd; pops given entry (default is current)
#help: usage : pop [n]
function pop () {
    popd ${1:++$1} > /dev/null
    dirs -l -v
}

#help: prep : used to give a boilerplate file for editing
#help: usage : prep file.(sh|pl|py|fn|fnc)
#help: : based on extension;
#help: : sh for shell scripts
#help: : pl for perl scripts
#help: : py for python scripts
#help: : fn|fnc for bash functions
function prep ()
{
    declare PREPDIR=$ENVDIR/support/prep_files
    declare dest base file type
    source ${PREPDIR}/map
    for file in $@; do
        read base type < <(echo ${file/./ })
        [[ $type =~ fn ]] && dest=$base || dest=$file
        [[ -s $dest ]] && echo $dest exists: skipping && continue
        sed -e "s/zZz/$base/" $PREPDIR/${map[$type]} > $dest
        [[ -s $dest ]] || { echo sed failed; continue; }
        [[ $type =~ (sh|pl|py) ]] && chmod 755 $dest
        echo prepped $dest as ${map[$type]}
    done
}

#help: push : simple wrapper for pushd
#help: usage : push (path)
function push () {
    declare dir="$1"
    if [[ ! -d $dir ]]; then
	read -p 'new dir: ' -e -i "$dir" dir
	[[ -n $dir ]] && mkdir -p "$dir"
    fi
    pushd "$dir" &>/dev/null
    dirs -l -v
}

#help: show : used to show variable values
#help: usage : show var
#help: : type values in lowercase and <tab> will uppercase if needed
function show ()
{
    declare x=$(declare -p $1 | awk '{print $2}')
    if [[ $x =~ [aA] ]]; then
        echo array $1:
        for x in $(eval "echo \${!$1[@]}"); do
            eval "echo $x = \${$1[$x]}"
        done
    else
        echo $1 = ${!1}
    fi
}

#help: spx : simple function to do aspell
#help: usage : spx word [word ...]
function spx ()
{
    echo $@ | aspell -a
}

#help: stp :: utility to set prompt line characteristics
#help: usage : stp [args...]
#help: : args are: key[=0|1][=color][=text]
#help: : keys are:
#help: : num : history number at beginning
#help: : extra : extra field
#help: : tag : tag field
#help: : user : the users sid
#help: : host : hostname
#help: : spath : short path
#help: : lpath : full path
#help: : prompt : prompt symbol (# for root, $ for loader)
function stp () {
    declare x key
    declare flip color text
    declare colors=${!_ColorNum[*]}
    declare colorPat=${colors// /|}
    declare -A promptMap
    for x in ${!_PromptShow[*]}; do promptMap[${x:0:1}]=$x; done
    for x in "$@"; do
	key=${x%%=*}
	while read x; do
	    case $x in 
		[01])
		    flip=$x
		    ;;
		@($colorPat))
		    color=$x
		    ;;
		*)
		    text=$x
		    ;;
	    esac
	done < <(echo -n ${1#*=} | perl -a -F/=/ -E 'say for @F')
	[[ -n $text ]] && [[ $key =~ tag|extra ]] && _PromptCfg[$key]=$text
	[[ -n $color ]] && _PromptColor[$key]=$color
	[[ -n $flip ]] && _PromptShow[$key]=$flip 
	unset text color flip key
    done
    _PromptShow[host]=1
    _PromptShow[prompt]=1
    PS1=
    for x in num extra tag user host spath lpath prompt; do
        [[ ${_PromptShow[$x]} = 0 ]] && continue
	[[ ${_PromptCfg[$x]} = '' ]] && continue
        color=${_PromptColor[$x]}
        num=${_ColorNum[$color]}
        PS1+=$'\[\e['${num}m$'\]'${_PromptCfg[$x]}' '
    done
    PS1+=$'\[\e[m\]'
}

#help: tag : shortcut to set tag for the prompt
#help: usage : tag [color=]'text'
function  tag () { stp tag="$*"; }

#help: xtfn : function to extract a function for an aggregated list
#help: usage : xtfn function
function xtfn () {
    sed -nrs "/^function $1 /{:1;p;n;/^}/!b1;p;q}" $MAINDIR/*_functions
}
