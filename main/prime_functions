#help: L : provides ls support for hidden (dot) files
#help: usage : L [options] [dir]
function L () {
    declare -a args
    declare opts=lAd
    for x in $*; do
        case $x in
            -?)
                opts+=${x/-}
                ;;
            *)
                args+=("$x")
                ;;
        esac
    done
    [[ ${#args[@]} -gt 0 ]] || args+=(.)
    for x in "${args[@]}"; do
        ls -$opts "$x"/.??* 2> /dev/null
    done
}
#split#
#help: _ArgParser : argument completion function
function _ArgParser () {
    declare path file partial dir
    declare -a list
    [[ -n COMP_LINE ]] && x=$2 || x=$1
    partial=${x/\~/$HOME}
    file=${partial##*/}
    for dir in "${partial%/*}" "${DIRSTACK[@]}" ${CDPATH//:/ }; do
        [[ ${#list[@]} -eq 0 ]] || break
        while read -r path; do
            [[ -d $path ]] && list+=("$path")
        done < <(compgen -G "${dir:-.}/$file*" | sort)
    done
    [[ ${#list[@]} -gt 0 ]] && _FixList -u "${list[@]}"
}
#split#
#help: _FixList :  some basic list operations:
#help: :  -s sort
#help: :  -e exists
#help: :  -r reverse
#help: :  -l resolve links
#help: :  -c clear items
#help: :  -u unique items
#help: :  -S output a single string
function _FixList () {
    declare p opt
    declare -a nlist list opts
    for p in "$@"; do
        [[ $p =~ ^-.* ]] && opts+=($p) || list+=("$p")
    done
    if [[ ${#list[@]} -eq 0 ]]; then
        while read p; do
            list+=("$p")
        done < <(cat -- -)
    fi
    for opt in ${opts[@]}; do
        nlist=()
        case $opt in
            -s)
                while read -r p; do
                    nlist+=("$p")
                done < <(printf '%s\n' "${list[@]}" | sort)
                ;;
            -e)
                for p in "${list[@]}"; do
                    [[ -e "$p" ]] && nlist+=("$p") || continue
                done
                ;;
            -r)
                while read -r p; do
                    nlist+=("$p")
                done < <(printf '%s\n' "${list[@]}" | tac)
                ;;
            -l)
                for p in "${list[@]}"; do
                    [[ -L "$p" ]] && p=$(readlink -e "$p") || :
                    nlist+=("$p")
                done
                ;;
            -c)
                for p in "${list[@]:1}"; do
                    [[ $p =~ ${list[0]}.* ]] || nlist+=("$p")
                done
                ;;
            -u)
                for p in "${list[@]}"; do
                    [[ ${nlist[@]} =~ :$p ]] || nlist+=(":$p")
                done
                nlist=("${nlist[@]/#:}")
                ;;
            -S|*)
                declare IFS=${SEP:-:}$IFS
                echo "${list[*]}"
                return
                ;;
        esac
        list=("${nlist[@]}")
    done
    printf '%s\n' "${list[@]}"
}
#split#
#help: _Show : complete function for the show function
function _Show () {
    declare x
    [[ -n $COMP_LINE ]] && x=$2 || x=$1
    compgen -v | grep -i "^$x"
}
#split#
#help: cksumit : provides a line checksum for given files.
#help: usage : cksumit file [file ...]
function cksumit () {
    for x in $@; do
	echo ${x#$PRUNE/}
        while read -r; do
            ck=$(echo $REPLY | tr -d '[[:space:]]' | sum)
            echo ${ck%% *} "$REPLY"
        done < $x
        echo ''
    done
}
#split#
#help: configEd : configure the editor of your choice (emacs, vim)
#help: usage : configEd [emacs|vim]
function configEd () {
    case $1 in
        emacs)
            ps -f -C emacs | grep -q daemon || emacs --daemon
            export EDITOR=$(type -p emacsclient | head -n 1)
            export VISUAL=$EDITOR
            set -o emacs
            ;;
        vim)
            export EDITOR=$(type -p vim vi | head -n 1)
            export VISUAL=$EDITOR
            set -o vi
            ;;
    esac
}
#split#
#help: extra : shortcut to set extra for the prompt
#help: usage : extra [color=]'text'
function extra () {
    stp extra=1="$*"
}
#split#
#help: fjoin : takes a dir of functions and makes a function file
#help: usage : fjoin functions_<*> [functions_<*> ...]
#help: : for each existing named dir this will cat the files in that dir and
#help: : output the results to <*>_functions. this overwrites the dest file.
#help: : then the dir is removed.
function fjoin () {
    declare dir=${1/%\/}
    for dir in ${@/%\/}; do
	[[ -d $dir ]] || { echo  $dir does not exist, skipping; continue; }
	[[ $dir =~ ^functions_ ]] || { echo bad input argument, skipping; continue; }
	declare file=${dir#*_}_functions
	for x in $dir/*; do
	    cat $x
	    echo '#split#'
	done >| $file || { echo unable to create $file, skipping; continue; }
	rm -r $dir || { echo unable to remove $dir, skipping; rm $file; continue; }
    done
}
#split#
#help: fsplit : splits a file of functions into a dir of separate functions
#help: usage : fsplit file
function fsplit () {
    declare lib
    for lib in $*; do
	[[ $lib =~ _functions$ ]] || { echo bad input argument for $lib, skipping; continue; }
	[[ -s $lib ]] || { echo "can not find <$lib>, skipping"; continue; }
	declare -x outputDir=functions_${lib%_*}
	[[ -d $outputDir ]] && { echo dir for $outputDir already exists; continue; }
	mkdir $outputDir &>/dev/null || { echo "can't make dir $outputDir"; continue; }
	csplit -s -z --prefix=$outputDir/xx $1 /^#split#$/ {*}
	sed -i '/^#split#$/d' $outputDir/xx*
	find $outputDir -type f -empty | xargs rm
	pushd $outputDir &>/dev/null || { echo "can't cd into $outputDir"; rm -r $outputDir; continue; }
	for x in *; do
	    new=$(awk '/^function / {print $2;exit}' $x)
	    mv $x $new
	done
	popd &>/dev/null
    done
}
#split#
#help: hlp : help for functions loaded
#help: usage : hlp function
#help: usage : hlp
function hlp () {
    declare flist=$(echo $MAINDIR/*_functions)
    if [[ $# -eq 1 ]]; then
        sed -nr "/^#help: $1 :/{:1;p;n;/^function/!b1}" $flist | cut -f2- -d: | column -n -s: -t
    else
        awk '/^function / {print "#help: "$2" :"}' $flist |
            grep -f - $flist | sed -n "s|$MAINDIR/||p" |
            cut -f1,3- -d: | column -s: -t | sort -k1,1r -k2,2 
    fi
}
#split#
#help: load : loads functions from MAINDIR files
#help: usage : load function
function load () {
    declare list x y 
    for x in $@; do
	[[ $x =~ _functions$ ]] && . $MAINDIR/$x && continue
	list=$(grep -l -w "^function $x " $MAINDIR/*_functions $MAINDIR/$x 2>/dev/null)
	[[ -n $list ]] || { echo skipping $x, not found in $MAINDIR; continue; }
	for y in $list; do
	    echo loading $x from $y
	    sed -nr "/^function $x /{:1;p;n;/^}/!b1;p;q}" $y > /tmp/$x
	    . /tmp/$x
	    rm /tmp/$x
	done
	list=''
    done
}
#split#
#help: lsu : a long listing of dirs moving up the dir path
#help: usage : lsu
function lsu () {
    declare -a np=(/ "${1:-$PWD}")
    while [[ -n ${np[-1]%/*} ]]; do
        np+=(${np[-1]%/*})
    done
    ls -ld "${np[@]}"
}
#split#
#help: mkwdir : creates a new arg.nn dir based on arg
#help: usage : mkwdir (base)
#help: : default arg is the date
function mkwdir () {
    declare count dir pat date=$(date +%F | tr '-' '_')
    pat=${1:=$date}
    count=$(ls -d $pat.?? 2>/dev/null | wc -l)
    printf -v dir "%s.%02d" $pat $((1+count))
    mkdir -v $dir
}
#split#
#help: pop : simple wrapper for popd; pops given entry (default is current)
#help: usage : pop [n]
function pop () {
    popd ${1:++$1} > /dev/null
    dirs -l -v
}
#split#
#help: prep : used to give a boilerplate file for editing
#help: usage : prep file.(sh||fn|pl|pm|py)
#help: : based on extension;
#help: : sh for shell scripts
#help: : pl for perl scripts
#help: : py for python scripts
#help: : fn for bash functions
#help: : pm for perl module
function prep () {
    declare PREPDIR=$ENVDIR/support/prep_files
    declare dest base file type
    source ${PREPDIR}/map
    for file in $@; do
        read base type < <(echo ${file/./ })
        [[ $type =~ fn ]] && dest=$base || dest=$file
        [[ -s $dest ]] && echo $dest exists: skipping && continue
        sed -e "s/zZz/$base/" $PREPDIR/${map[$type]} > $dest
        [[ -s $dest ]] || { echo sed failed; continue; }
        [[ $type =~ (sh|pl|py) ]] && chmod 755 $dest
        echo prepped $dest as ${map[$type]/_/ }
    done
}
#split#
#help: push : simple wrapper for pushd
#help: usage : push (path)
function push () {
    if [[ -n $1 ]]; then
	if [[ -d $1 ]]; then
	    pushd -n $1 &>/dev/null
	else
	    read -p 'new dir: ' -e -i "$1"
	    [[ -n $REPLY ]] && mkdir -p "$REPLY"
	    pushd -n "$REPLY" &>/dev/null
	fi
    fi
    pushd &>/dev/null
    dirs -l -v
}	
#split#
#help: show : used to show variable values
#help: usage : show var
#help: : type values in lowercase and <tab> will uppercase if needed
function show () {
    declare x=$(declare -p $1 | awk '{print $2}')
    if [[ $x =~ [aA] ]]; then
        echo array $1:
        for x in $(eval "echo \${!$1[@]}"); do
            eval "echo $x = \${$1[$x]}"
        done
    else
        echo $1 = ${!1}
    fi
}
#split#
#help: spx : simple function to do aspell
#help: usage : spx word [word ...]
function spx () {
    echo $@ | aspell -a
}
#split#
#help: stp :: utility to set prompt line characteristics
#help: usage : stp [args...]
#help: : args are: key[=0|1][=color][=text]
#help: : keys are:
#help: : num : history number at beginning
#help: : extra : extra field
#help: : tag : tag field
#help: : user : the users sid
#help: : host : hostname
#help: : spath : short path
#help: : lpath : full path
#help: : prompt : prompt symbol (# for root, $ for loader)
function stp () {
    declare x key
    declare flip color text
    declare colors=${!_ColorNum[*]}
    declare colorPat=${colors// /|}
    for x in "$@"; do
        key=${x%%=*}
        while read x; do
            case $x in 
                0|1)
		    _PromptShow[$key]=$x
                    ;;
                @($colorPat))
		    _PromptColor[$key]=$x
                    ;;
		+([[:digit:]]))
		    _PromptColor[$key]=$x
		    ;;
		    *|'')
		    [[ $key =~ tag|extra ]] && _PromptCfg[$key]=$x
                    ;;
            esac
        done < <(echo ${x#*=} | sed -nr 's/=/\n/g;p')
        unset text color flip key
    done
    _PromptShow[host]=1
    _PromptShow[prompt]=1
    PS1=
    for x in num extra tag user host spath lpath prompt; do
        [[ ${_PromptShow[$x]} = 0 ]] && continue
        [[ ${_PromptCfg[$x]} = '' ]] && continue
	if [[ ${_PromptColor[$x]} =~ [0-9] ]]; then
	    num="38:5:${_PromptColor[$x]}"
	else
	    color=${_PromptColor[$x]}
	    num=${_ColorNum[$color]}
	fi
	PS1+=$'\[\e['${num}m$'\]'${_PromptCfg[$x]}' '
    done
    PS1+=$'\[\e[m\]'
}
#split#
#help: tag : shortcut to set tag for the prompt
#help: usage : tag [color=]'text'
function  tag () {
    stp tag=1="$*"
}
#split#
#help: xtfn : function to extract a function for an aggregated list
#help: usage : xtfn function
function xtfn () {
    sed -nrs "/^function $1 /{:1;p;n;/^}/!b1;p;q}" $MAINDIR/*_functions
}
#split#
