
function _SetPrompt () {
    declare OPTIND x opt key value
    declare -A promptMap
    for x in ${!_PromptShow[*]}; do promptMap[${x:0:1}]=$x; done
    while getopts ':n:u:h:s:l:t:x:' opt; do
	[[ $opt = : ]] && x=${promptMap[$OPTARG]} || x=${promptMap[$opt]}
        case $opt in
	    [tx])
		[[ $OPTARG =~ = ]] && _PromptColor[$x]=${OPTARG%=*}
		_PromptCfg[$x]=${OPTARG#*=}
		_PromptShow[$x]=1
		;;
	    [hlnsu])
		_PromptColor[$x]=${OPTARG%=*}
		;;
            :)
		((_PromptShow[$x]=1-${_PromptShow[$x]}))
                ;;
            *)
                echo opt is $opt, optarg is $OPTARG
                return
                ;;
        esac
    done
    shift $((OPTIND-1))
    _PromptShow[host]=1
    _PromptShow[prompt]=1
    PS1=
    for x in num xtra tag user host spath lpath prompt; do
        [[ ${_PromptShow[$x]} = 0 ]] && continue
	[[ ${_PromptCfg[$x]} = '' ]] && continue
        color=${_PromptColor[$x]}
        num=${_ColorNum[$color]}
        PS1+=$'\[\e['${num}m$'\]'${_PromptCfg[$x]}' '
    done
    PS1+=$'\[\e[m\]'
}

function cprompt () {
    declare key value x cmd
    if [[ $1 = help ]]; then
	cat <<-end
	args are: key[=color][=text]
	keys are: num xtra tag user host spath lpath prompt
	a bare key toggles that item
	end
	return
    fi
    for x in "$@"; do
	read key value <<-end
	${x/=/ }
	end
	cmd="-${key:0:1} "
	[[ $value != '' ]] && cmd+="'$value' "
	eval "_SetPrompt $cmd"
    done
    ${cmd:-_SetPrompt}
}

function  tag () { cprompt tag="$*"; }
function xtra () { cprompt xtra="$*"; }

