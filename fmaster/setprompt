
declare -A ct pc
ct=([black]=30 [red]=31 [green]=32 [yellow]=33 [blue]=34 [magenta]=35 [cyan]=36 [white]=37)
pc=([user]=blue [host]=cyan [spath]=green [lpath]=green [prmt]=green [xtra]=red)

declare -a base_prompt po
base_prompt=(xtra host user spath lpath prmt)
po=(host prmt)

mkpc () {
    declare tmp ndx us
    PS1=''
    for ndx in ${po[@]}; do
	read tmp <<< $(cs ${pc[$ndx]})
	case $ndx in
	    xtra)  PS1+=$'\[\e['$tmp$'m\]$xtra' ;;
	    host)  PS1+=$'\[\e['$tmp$'m\]\h' ;;
	    user)  PS1+=$'\[\e['$tmp$'m\]($defuser)' ;;
	    lpath) PS1+=$'\[\e['$tmp$'m\]{\w}' ;;
	    spath) PS1+=$'\[\e['$tmp$'m\]{\W}' ;;
	    prmt)  PS1+=$'\[\e['$tmp$'m\]\$' ;;
	esac
	[[ $tmp =~ ';' ]] && PS1+=$'\[\e[m\]'
    done
    PS1+=$'\[\e[m\] '
}

cs () {
    declare ncg=$(shopt -p nocaseglob) us=$1
    [[ $ncg =~ -s ]] && shopt -u nocaseglob
    [[ $us =~ B ]] && us=${us/B/1;}
    [[ $us =~ _ ]] && us=${us/_/4;}
    [[ $us =~ R ]] && us=${us/R/7;}
    [[ $ncg =~ -s ]] && $ncg
    [[ $us =~ ';' ]] && us="${us%;*};${ct[${us##*;}]}" || us=${ct[${us##*;}]}
    echo $us
}

show_colors () {
    declare ndx
    for ndx in black red green yellow blue magenta cyan white; do
	echo -ne "\E[${ct[$ndx]}m $ndx \E[m "
    done
    echo ''
}

build_select () {
    declare ndx tmp
    colors=()
    for ndx in ${base_prompt[@]}; do
	read tmp <<< $(cs ${pc[$ndx]})
	colors=("${colors[@]}" $(eval "echo -e '\E[${tmp}m$ndx\E[m'"))
    done
    if [[ $1 == show ]]; then
	for ndx in "${colors@]}"; do
	    echo -e $ndx
	done
	unset colors
    fi
}

build_drop () {
    declare ndx
    drop=()
    for ndx in ${base_prompt[@]}; do
	[[ ! ${po[@]} =~ $ndx ]] && drop=(${drop[@]} $ndx)
    done
}

p% () {
    declare OPTARG OPTIND REPLY
    delcare ndx val new color
    declare -a colors
    declare -a drop
    while [ 1 ]; do
	show_colors
	build_select
	build_drop
	PS3="${po[@]} <> ${drop[@]}: "
	select val in "${colors[@]}" 'clear' quit; do
	    case ${val:=$REPLY} in
		quit) break 2 ;;
		'clear')
		    drop=(${po[@]} ${dorp[@]});
		    po=()
		    ;;
		*)
		    read val color <<< $REPLY
		    if [[ -n $color ]]; then
			pc[$val]=$color
			mkpc
			break
		    else
			if [[ ${po[@]} =~ $val ]]; then
			    tmp=${po[@]}
			    read -a po <<< ${tmp//$val}
			    drop=(${drop[@]} $val)
			else
			    tmp=${drop[@]}
			    read -a drop <<< ${tmp//$val}
			    po=(${po[@]} $val)
			fi
		    fi
		    ;;
	    esac
	    PS3="${po[@]} <> ${drop[@]}: "
	done
    done
    mkpc
}
